var search_data = {"index":{"searchIndex":["table","column()","count()","get_columns()","get_rows()","join()","length()","new()","row()","select()","size()","sort()","sort_by()","sub()","sub!()","tally()","to_date()","to_i()","to_s()","where()","write_file()"],"longSearchIndex":["table","table#column()","table#count()","table#get_columns()","table#get_rows()","table#join()","table#length()","table::new()","table#row()","table#select()","table#size()","table#sort()","table#sort_by()","table#sub()","table#sub!()","table#tally()","table#to_date()","table#to_i()","table#to_s()","table#where()","table#write_file()"],"info":[["Table","","Table.html","","<p>This class is a Ruby representation of a table. All data is captured as\ntype <code>String</code> by default. Columns …\n"],["column","Table","Table.html#method-i-column","(colname)","<p>Return a copy of a column from the table, identified by column name\n<p>colname &mdash; <code>String</code> to identify the name …\n\n"],["count","Table","Table.html#method-i-count","(colname=nil, value=nil)","<p>Counts the number of instances of a particular string, given a column name,\nand returns an integer &gt;= …\n"],["get_columns","Table","Table.html#method-i-get_columns","(*columns)",""],["get_rows","Table","Table.html#method-i-get_rows","(colname, condition=nil)",""],["join","Table","Table.html#method-i-join","(table2, colname, col2name=nil)","<p>Given a second table to join against, and a field/column, return a\n<code>Table</code> which contains a join of the …\n"],["length","Table","Table.html#method-i-length","(colname=nil, value=nil)",""],["new","Table","Table.html#method-c-new","(input=nil)","<p>Instantiate a <code>Table</code> object using a tab-delimited file\n<p>input &mdash; <code>Array</code> of rows or <code>String</code> to identify the name …\n\n"],["row","Table","Table.html#method-i-row","(index)","<p>Return a copy of a row from the table as an <code>Array</code>, given an\nindex (i.e. row number).\n<p>index &mdash; <code>FixNum</code> indicating …\n\n"],["select","Table","Table.html#method-i-select","(*columns)","<p>Select columns from the table, given one or more column names. Returns an\ninstance of <code>Table</code> with the …\n"],["size","Table","Table.html#method-i-size","(colname=nil, value=nil)",""],["sort","Table","Table.html#method-i-sort","(colname)","<p>Sort a <code>Table</code>, given a column name.  Uses default sorting\nprecedence.  Recognizes Date and Integer values. …\n"],["sort_by","Table","Table.html#method-i-sort_by","(colname)",""],["sub","Table","Table.html#method-i-sub","(colname, re, replace)","<p>Given a field/column, and a regular expression to match against, and a\nreplacement string, update the …\n"],["sub!","Table","Table.html#method-i-sub-21","(colname, re, replace)",""],["tally","Table","Table.html#method-i-tally","(colname)","<p>Count instances in a particular field/column and return <code>Table</code>\nof the results. Returns <code>nil</code> if the column …\n"],["to_date","Table","Table.html#method-i-to_date","(colname)","<p>Converts a Column in the table to a <code>Date</code> type. Returns\n<code>nil</code> if the column is not found.\n<p>colname &mdash; <code>String</code> …\n\n"],["to_i","Table","Table.html#method-i-to_i","(colname)","<p>Converts a Column in the table to an <code>Integer</code> type. Returns\n<code>nil</code> if the column is not found.\n<p>colname &mdash; <code>String</code> …\n\n"],["to_s","Table","Table.html#method-i-to_s","()","<p>Converts a <code>Table</code> object to a tab-delimited string.\n<p>none\n"],["where","Table","Table.html#method-i-where","(colname, condition=nil)","<p>Given a particular condition for a given column field/column, return a\nsubtable that matches the condition. …\n"],["write_file","Table","Table.html#method-i-write_file","(filename)","<p>Write a representation of the <code>Table</code> object to a file (tab\ndelimited).\n<p>filename &mdash; <code>String</code> to identify the …\n\n"]]}}