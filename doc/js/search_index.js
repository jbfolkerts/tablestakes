var search_data = {"index":{"searchIndex":["orderedrow","table","<<()","<=>()","add_column()","add_row()","add_rows()","append()","bottom()","column()","count()","data()","del_column()","del_row()","each()","empty?()","get_columns()","get_rows()","intersect()","join()","length()","new()","new()","rename_header()","row()","select()","size()","sort()","sort!()","sub()","tally()","to_a()","to_s()","top()","union()","where()","write_file()"],"longSearchIndex":["orderedrow","table","table#<<()","orderedrow#<=>()","table#add_column()","table#add_row()","table#add_rows()","table#append()","table#bottom()","table#column()","table#count()","orderedrow#data()","table#del_column()","table#del_row()","table#each()","table#empty?()","table#get_columns()","table#get_rows()","table#intersect()","table#join()","table#length()","orderedrow::new()","table::new()","table#rename_header()","table#row()","table#select()","table#size()","table#sort()","table#sort!()","table#sub()","table#tally()","table#to_a()","table#to_s()","table#top()","table#union()","table#where()","table#write_file()"],"info":[["OrderedRow","","OrderedRow.html","","<p>This class functions as a temporary representation of a row. The OrderedRow\ncontains information about …\n"],["Table","","Table.html","","<p>This class is a Ruby representation of a table. All data is captured as\ntype <code>String</code> by default. Columns …\n"],["<<","Table","Table.html#method-i-3C-3C","(*row)",""],["<=>","OrderedRow","OrderedRow.html#method-i-3C-3D-3E","(other)","<p>Implements comparable\n<p>Attributes\n<p>other &mdash; The row to be compared\n"],["add_column","Table","Table.html#method-i-add_column","(*args)","<p>Add a column to the Table. Raises ArgumentError if the column name is\nalready taken  or there are not …\n"],["add_row","Table","Table.html#method-i-add_row","(*row)","<p>Add a row to the Table, appending it to the end. Raises ArgumentError if \nthere are not the correct number …\n"],["add_rows","Table","Table.html#method-i-add_rows","(array_of_rows)","<p>Add one or more rows to the Table, appending it to the end. Raises\nArgumentError if  there are not the …\n"],["append","Table","Table.html#method-i-append","(a_table)","<p>Append one Table object to another. Raises ArgumentError if the header\nvalues and order do not  align …\n"],["bottom","Table","Table.html#method-i-bottom","(colname, num=1)","<p>Returns counts of the least frequent values found in a given column in the\nform of a Table.  Raises  …\n"],["column","Table","Table.html#method-i-column","(colname)","<p>Return a copy of a column from the table, identified by column name.\nReturns empty Array if column name …\n"],["count","Table","Table.html#method-i-count","(colname=nil, value=nil)","<p>Counts the number of instances of a particular string, given a column name,\nand returns an integer &gt;= …\n"],["data","OrderedRow","OrderedRow.html#method-i-data","()","<p>Returns the row elements in an <code>Array</code>\n<p>Attributes\n<p>none\n"],["del_column","Table","Table.html#method-i-del_column","(colname)","<p>Delete a column from the Table. Raises ArgumentError if the column name\ndoes not exist.\n<p>Attributes\n<p>colname … &mdash; "],["del_row","Table","Table.html#method-i-del_row","(rownum)","<p>Delete a row from the Table. Raises ArgumentError if the row number is not\nfound\n<p>Attributes\n<p>rownum &mdash; <code>FixNum</code> …\n"],["each","Table","Table.html#method-i-each","()","<p>Defines an iterator for <code>Table</code> which produces rows of data\n(headers omitted) for its calling block.\n"],["empty?","Table","Table.html#method-i-empty-3F","()","<p>Return true if the Table is empty, false otherwise.\n"],["get_columns","Table","Table.html#method-i-get_columns","(*columns)",""],["get_rows","Table","Table.html#method-i-get_rows","(colname, condition=nil)",""],["intersect","Table","Table.html#method-i-intersect","(table2, colname, col2name=colname)","<p>Return an Array with the intersection of columns from different tables,\neliminating duplicates. Return …\n"],["join","Table","Table.html#method-i-join","(table2, colname, col2name=colname)","<p>Given a second table to join against, and a field/column, return a\n<code>Table</code> which contains a join of the …\n"],["length","Table","Table.html#method-i-length","(colname=nil, value=nil)",""],["new","OrderedRow","OrderedRow.html#method-c-new","(my_array, index)","<p>Creates a new OrderedRow. Callers must specify the index of the row element\nwhich will be used for order …\n"],["new","Table","Table.html#method-c-new","(input=nil)","<p>Instantiate a <code>Table</code> object using a tab-delimited file\n<p>Attributes\n<p>input &mdash; OPTIONAL <code>Array</code> of rows or <code>String</code> …\n"],["rename_header","Table","Table.html#method-i-rename_header","(orig_name, new_name)","<p>Rename a header value for this <code>Table</code> object.\n<p>Attributes\n<p>orig_name &mdash; <code>String</code> current header name\n"],["row","Table","Table.html#method-i-row","(index)","<p>Return a copy of a row from the table as an <code>Array</code>, given an\nindex (i.e. row number). Returns empty Array …\n"],["select","Table","Table.html#method-i-select","(*columns)","<p>Select columns from the table, given one or more column names. Returns an\ninstance of <code>Table</code> with the …\n"],["size","Table","Table.html#method-i-size","(colname=nil, value=nil)",""],["sort","Table","Table.html#method-i-sort","(column=nil, &block)","<p>Sort the table based on given column. Uses precedence as defined in the \ncolumn. By default will sort …\n"],["sort!","Table","Table.html#method-i-sort-21","(column=nil, &block)",""],["sub","Table","Table.html#method-i-sub","(colname, match=nil, replace=nil, &block)","<p>Given a field/column, and a regular expression to match against, and a\nreplacement string, create a new …\n"],["tally","Table","Table.html#method-i-tally","(colname)","<p>Count instances in a particular field/column and return a\n<code>Table</code> of the results. Raises ArgumentError …\n"],["to_a","Table","Table.html#method-i-to_a","()","<p>Converts a <code>Table</code> object to an array of arrays (each row). The\nfirst entry are the table headers.\n<p>Attributes …\n"],["to_s","Table","Table.html#method-i-to_s","()","<p>Converts a <code>Table</code> object to a tab-delimited string.\n<p>Attributes\n<p>none\n"],["top","Table","Table.html#method-i-top","(colname, num=1)","<p>Returns counts of the most frequent values found in a given column in the\nform of a Table.  Raises ArgumentError …\n"],["union","Table","Table.html#method-i-union","(table2, colname, col2name=colname)","<p>Return Array with the union of elements columns in the given tables,\neliminating duplicates. Raises an …\n"],["where","Table","Table.html#method-i-where","(colname, condition=nil)","<p>Given a particular condition for a given column field/column, return a\nsubtable that matches the condition. …\n"],["write_file","Table","Table.html#method-i-write_file","(filename)","<p>Write a representation of the <code>Table</code> object to a file (tab\ndelimited).\n<p>Attributes\n<p>filename &mdash; <code>String</code> to identify …\n"]]}}